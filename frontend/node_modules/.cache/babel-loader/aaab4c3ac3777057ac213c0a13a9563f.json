{"ast":null,"code":"import axios from 'axios';\nlet data = [{\n  user: {\n    login: \"trrttrtrsrfewrwed\",\n    email: \"nurgaliev.tr@phystech.edu\"\n  },\n  password: \"qwerty\",\n  data: [{\n    id: 1,\n    name: \"Пошутить\",\n    category: \"outdoors\",\n    description: \"Смешно пошутить\",\n    time: \"12:22\",\n    rating: 4,\n    minimized: true\n  }, {\n    id: 2,\n    name: \"Пошутить\",\n    category: \"outdoors\",\n    description: \"Смешно пошутить\",\n    time: \"00:01\",\n    rating: 5,\n    minimized: true\n  }, {\n    id: 3,\n    name: \"Пошутить\",\n    category: \"outdoors\",\n    description: \"Смешно пошутить\",\n    time: \"00:01\",\n    rating: 4,\n    minimized: true\n  }, {\n    id: 4,\n    name: \"Пошутить\",\n    category: \"outdoors\",\n    description: \"Смешно пошутить\",\n    time: \"00:01\",\n    rating: 4,\n    minimized: true\n  }]\n}]; // Ok, not exactly two seconds. To sec appeared to be too much\n\nfunction resolveAfter2Seconds(x) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(x);\n    }, 20);\n  });\n}\n\nfunction rejectAfter1Second(error) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(error);\n    }, 1000);\n  });\n}\n\nasync function addUser(user, password) {\n  if (data.find(elem => {\n    return elem.user.email == user.email;\n  }) == null) {\n    console.log(\"addUser OK\");\n    data.push({\n      user: user,\n      password: password,\n      data: []\n    });\n    return resolveAfter2Seconds({\n      user: user,\n      data: []\n    });\n  } else {\n    console.log(\"addUser REJECT\");\n    return rejectAfter1Second(\"user with such email already exists\");\n  }\n}\n\nasync function enter(email, password) {\n  console.log(\"enter\", email, password);\n  let find_result = data.find(elem => {\n    return elem.user.email == email && elem.password == password;\n  });\n  console.log(find_result);\n\n  if (find_result == null) {\n    console.log(\"enter REJECT\");\n    return rejectAfter1Second(\"incorrect email or password\");\n  } else {\n    console.log(\"enter OK\");\n    return resolveAfter2Seconds({\n      user: find_result.user,\n      data: find_result.data\n    });\n  }\n}\n\nasync function sdata(new_data, email) {\n  console.log(\"sdata\", new_data, email);\n  let find_result = data.find(elem => {\n    return elem.user.email == email;\n  });\n  console.log(\"find result\", find_result);\n\n  if (find_result == null) {\n    console.log(\"set data REJECT\");\n    return rejectAfter1Second(\"incorrect email to set data\");\n  } else {\n    console.log(\"set data OK\");\n    data = data.map(elem => {\n      if (elem.user.email == email) {\n        return {\n          user: elem.user,\n          password: elem.password,\n          data: new_data\n        };\n      }\n\n      return elem;\n    });\n    return resolveAfter2Seconds({\n      user: find_result.user,\n      data: new_data\n    });\n  }\n}\n\nconst USER_API_BASE_URL = \"http://localhost:8080/api/v1/users\";\nconst UserService = {\n  signup(user, password) {\n    //return addUser(user, password)\n    addedUser = axios.post(USER_API_BASE_URL, user, password);\n    console.log(\"addedUser\", addedUser);\n    return {\n      user: {\n        login: addedUser.name,\n        email: addedUser.email\n      },\n      data: JSON.parse(addedUser.data)\n    };\n  },\n\n  login(email, password) {\n    //return enter(email, password)\n    console.log('login');\n    receivedUser = anxios.get(USER_API_BASE_URL + '/' + email, password);\n    console.log(\"receivedUser\", receivedUser);\n    return {\n      user: {\n        login: receivedUser.name,\n        email: receivedUser.email\n      },\n      data: JSON.parse(receivedUser.data)\n    };\n  },\n\n  setdata(data, email) {\n    //return sdata(data, email)\n    console.log('set data');\n    receivedUser = anxios.put(USER_API_BASE_URL + '/' + email, data);\n    console.log(\"receivedUser\", receivedUser);\n    return {\n      user: {\n        login: receivedUser.name,\n        email: receivedUser.email\n      },\n      data: JSON.parse(receivedUser.data)\n    };\n  }\n\n};\nexport default UserService;","map":{"version":3,"sources":["/home/mr_tross/Fullstack/torelax/src/userService/index.js"],"names":["axios","data","user","login","email","password","id","name","category","description","time","rating","minimized","resolveAfter2Seconds","x","Promise","resolve","setTimeout","rejectAfter1Second","error","reject","addUser","find","elem","console","log","push","enter","find_result","sdata","new_data","map","USER_API_BASE_URL","UserService","signup","addedUser","post","JSON","parse","receivedUser","anxios","get","setdata","put"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nlet data = [\n    {user: {login: \"trrttrtrsrfewrwed\", email: \"nurgaliev.tr@phystech.edu\"},\n     password: \"qwerty\", data: [{id: 1, name: \"Пошутить\", category: \"outdoors\", description: \"Смешно пошутить\", time: \"12:22\", rating: 4, minimized: true},\n     {id: 2, name: \"Пошутить\", category: \"outdoors\", description: \"Смешно пошутить\", time: \"00:01\", rating: 5, minimized: true},\n     {id: 3, name: \"Пошутить\", category: \"outdoors\", description: \"Смешно пошутить\", time: \"00:01\", rating: 4, minimized: true},\n     {id: 4, name: \"Пошутить\", category: \"outdoors\", description: \"Смешно пошутить\", time: \"00:01\", rating: 4, minimized: true},\n    ]}\n]\n\n// Ok, not exactly two seconds. To sec appeared to be too much\nfunction resolveAfter2Seconds(x) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(x);\n      }, 20);\n    });\n}\n\nfunction rejectAfter1Second(error) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          reject(error);\n        }, 1000);\n      });\n}\n\nasync function addUser(user, password) {\n    if (data.find((elem) => { return elem.user.email == user.email}) == null) {\n        console.log(\"addUser OK\")\n        data.push({user: user, password: password, data: []})\n        return resolveAfter2Seconds({user: user, data: []})\n    } else {\n        console.log(\"addUser REJECT\")\n        return rejectAfter1Second(\"user with such email already exists\")\n    }   \n} \n\nasync function enter(email, password) {\n    console.log(\"enter\", email, password)\n    let find_result = data.find((elem) => { return elem.user.email == email && elem.password == password})\n    console.log(find_result)\n    if (find_result == null) {\n        console.log(\"enter REJECT\")\n        return rejectAfter1Second(\"incorrect email or password\")\n    } else {\n        console.log(\"enter OK\")\n        return resolveAfter2Seconds({user: find_result.user, data: find_result.data})\n    }   \n} \n\nasync function sdata(new_data, email) {\n  console.log(\"sdata\", new_data, email)\n  let find_result = data.find((elem) => { return elem.user.email == email})\n  console.log(\"find result\", find_result)\n    if (find_result == null) {\n        console.log(\"set data REJECT\")\n        return rejectAfter1Second(\"incorrect email to set data\")\n    } else {\n        console.log(\"set data OK\")\n        data = data.map((elem) => {\n          if (elem.user.email == email) {\n            return {user: elem.user, password: elem.password, data: new_data}\n          }\n          return elem\n        })\n        return resolveAfter2Seconds({user: find_result.user, data: new_data})\n    }   \n}\n\nconst USER_API_BASE_URL = \"http://localhost:8080/api/v1/users\";\n\nconst UserService = {\n  signup(user, password) {\n    //return addUser(user, password)\n    addedUser = axios.post(USER_API_BASE_URL, user, password);\n    console.log(\"addedUser\", addedUser);\n    return {user: {login: addedUser.name, email: addedUser.email}, data: JSON.parse(addedUser.data)};\n  },\n  login(email, password) {\n    //return enter(email, password)\n    console.log('login');\n    receivedUser = anxios.get(USER_API_BASE_URL + '/' + email, password);\n    console.log(\"receivedUser\", receivedUser);\n    \n    return {user: {login: receivedUser.name, email: receivedUser.email}, data: JSON.parse(receivedUser.data)};\n  },\n  setdata(data, email) {\n    //return sdata(data, email)\n    console.log('set data');\n    receivedUser = anxios.put(USER_API_BASE_URL + '/' + email, data);\n    console.log(\"receivedUser\", receivedUser);\n    \n    return {user: {login: receivedUser.name, email: receivedUser.email}, data: JSON.parse(receivedUser.data)};\n  }\n};\n\nexport default UserService;"]},"metadata":{},"sourceType":"module"}