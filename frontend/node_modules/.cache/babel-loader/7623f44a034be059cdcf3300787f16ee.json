{"ast":null,"code":"import userService from '../../userService/index';\n\nfunction fetchStart() {\n  return {\n    type: 'USER_FETCHING'\n  };\n}\n\nfunction fetchFail(payload) {\n  return {\n    type: 'USER_FAIL',\n    payload\n  };\n}\n\nexport function fetchSuccess(payload) {\n  return {\n    type: 'USER_SUCCESS',\n    payload\n  };\n}\nexport function loginAction(email, password) {\n  return dispatch => {\n    dispatch(fetchStart());\n    return userService.login(email, password).then(res => {\n      let receivedUser = res.data;\n      localStorage.setItem(\"authorization\", res.data.token);\n      console.log(\"Token received: \", res.data.token);\n      dispatch(fetchSuccess({\n        user: {\n          login: receivedUser.name,\n          email: receivedUser.email\n        },\n        data: JSON.parse(receivedUser.data),\n        password: password\n      }));\n      console.log('0');\n    }).catch(error => {\n      if (error.response.data == \"Incorrect email or password\" || error.response.data.startsWith(\"User doesn't exist with email:\")) {\n        dispatch(fetchFail(error.response.data));\n      } else {\n        dispatch(fetchFail(error));\n      }\n\n      throw Error(error);\n    });\n  };\n}\nexport function signupAction(user, password) {\n  return dispatch => {\n    dispatch(fetchStart());\n    return userService.signup(user, password).then(res => {\n      console.log(\"successful signup\", res);\n      let addedUser = res.data;\n      console.log(\"received data: \", addedUser);\n      localStorage.setItem(\"authorization\", res.data.token);\n      console.log(\"Token received: \", res.data.token);\n      dispatch(fetchSuccess({\n        user: {\n          login: addedUser.name,\n          email: addedUser.email\n        },\n        data: JSON.parse(addedUser.data),\n        password: password\n      }));\n    }).catch(error => {\n      console.log(error.response.data);\n\n      if (error.response.data.startsWith(\"User with such email already exists\")) {\n        dispatch(fetchFail(error.response.data));\n      } else {\n        dispatch(fetchFail(error));\n      }\n\n      throw Error(error);\n    });\n  };\n}\nexport function setDataAction(data, email, password) {\n  return dispatch => {\n    dispatch(fetchStart());\n    return userService.setdata(data, email, password).then(res => {\n      let receivedUser = res.data;\n      dispatch(fetchSuccess({\n        user: {\n          login: receivedUser.name,\n          email: receivedUser.email\n        },\n        data: JSON.parse(receivedUser.data),\n        password: password\n      }));\n    }).catch(error => {\n      console.log(error.response.data.message);\n\n      if (error.response.data.message == \"UNAUTHORIZED\") {\n        console.log(\"Updating token...\");\n        userService.login(email, password).then(res => {\n          localStorage.setItem(\"authorization\", res.data.token);\n          console.log(\"Token received: \", res.data.token);\n          console.log(\"Token successfully updated. Retrying to set data...\");\n          dispatch(setDataAction(data, email, password));\n        }).catch(error => {\n          dispatch(fetchFail(error));\n          throw Error(error);\n        });\n      } else {\n        dispatch(fetchFail(error));\n        throw Error(error);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/home/mr_tross/Fullstack/torelax/src/actions/user/user.js"],"names":["userService","fetchStart","type","fetchFail","payload","fetchSuccess","loginAction","email","password","dispatch","login","then","res","receivedUser","data","localStorage","setItem","token","console","log","user","name","JSON","parse","catch","error","response","startsWith","Error","signupAction","signup","addedUser","setDataAction","setdata","message"],"mappings":"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","sourcesContent":["import userService from '../../userService/index'\n\nfunction fetchStart() {\n  return {\n    type: 'USER_FETCHING'\n  }\n}\n\nfunction fetchFail(payload) {\n  return {\n    type: 'USER_FAIL',\n    payload\n  }\n}\n\nexport function fetchSuccess(payload) {\n  return {\n    type: 'USER_SUCCESS',\n    payload\n  }\n}\n\nexport function loginAction(email, password) {\n  return dispatch => {\n    dispatch(fetchStart());\n\n    return userService.login(email, password).then((res) => {\n      let receivedUser = res.data;\n      localStorage.setItem(\"authorization\", res.data.token);\n      console.log(\"Token received: \", res.data.token);\n      dispatch(fetchSuccess({user: {login: receivedUser.name, email: receivedUser.email}, data: JSON.parse(receivedUser.data), password: password}))\n\n      console.log('0')\n    })\n      .catch((error) => {\n        if (error.response.data == \"Incorrect email or password\" || error.response.data.startsWith(\"User doesn't exist with email:\")) {\n          dispatch(fetchFail(error.response.data));\n        } else {\n          dispatch(fetchFail(error))\n        }\n        throw Error(error)\n      })\n  }\n}\n\nexport function signupAction(user, password) {\n  return dispatch => {\n    dispatch(fetchStart());\n\n    return userService.signup(user, password).then((res) => {\n      console.log(\"successful signup\", res);\n      let addedUser = res.data;\n      console.log(\"received data: \", addedUser);\n      localStorage.setItem(\"authorization\", res.data.token);\n      console.log(\"Token received: \", res.data.token);\n      dispatch(fetchSuccess({user: {login: addedUser.name, email: addedUser.email}, data: JSON.parse(addedUser.data), password: password}))\n    })\n      .catch((error) => {\n        console.log(error.response.data)\n        if (error.response.data.startsWith(\"User with such email already exists\")) {\n          dispatch(fetchFail(error.response.data));\n        } else {\n          dispatch(fetchFail(error))\n        }\n        throw Error(error)\n      })\n  }\n}\n\nexport function setDataAction(data, email, password) {\n  return dispatch => {\n    dispatch(fetchStart());\n\n    return userService.setdata(data, email, password).then((res) => {\n      let receivedUser = res.data;\n      dispatch(fetchSuccess({user: {login: receivedUser.name, email: receivedUser.email}, data: JSON.parse(receivedUser.data), password: password}))\n    })\n      .catch((error) => {\n        console.log(error.response.data.message)\n\n        if (error.response.data.message == \"UNAUTHORIZED\") {\n\n          console.log(\"Updating token...\");\n\n          userService.login(email, password).then((res) => {\n\n            localStorage.setItem(\"authorization\", res.data.token);\n            console.log(\"Token received: \", res.data.token);\n            console.log(\"Token successfully updated. Retrying to set data...\");\n\n            dispatch(setDataAction(data, email, password));\n\n          }).catch((error) => {\n              dispatch(fetchFail(error))\n              throw Error(error)\n          })\n          \n\n        } else {\n          dispatch(fetchFail(error))\n          throw Error(error)\n        }\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}