{"ast":null,"code":"import userService from '../../userService/index';\n\nfunction fetchStart() {\n  return {\n    type: 'USER_FETCHING'\n  };\n}\n\nfunction fetchFail(payload) {\n  return {\n    type: 'USER_FAIL',\n    payload\n  };\n}\n\nexport function fetchSuccess(payload) {\n  return {\n    type: 'USER_SUCCESS',\n    payload\n  };\n}\nexport function loginAction(email, password) {\n  return dispatch => {\n    dispatch(fetchStart());\n    return userService.login(email, password).then(res => {\n      let receivedUser = res.data;\n      dispatch(fetchSuccess({\n        user: {\n          login: receivedUser.name,\n          email: receivedUser.email\n        },\n        data: JSON.parse(receivedUser.data)\n      }));\n      console.log('0');\n    }).catch(error => {\n      dispatch(fetchFail(error));\n      throw Error(error);\n    });\n  };\n}\nexport function signupAction(user, password) {\n  return dispatch => {\n    dispatch(fetchStart());\n    return userService.signup(user, password).then(res => {\n      console.log(\"successful signup\", res);\n      let addedUser = res.data;\n      dispatch(fetchSuccess({\n        user: {\n          login: addedUser.name,\n          email: addedUser.email\n        },\n        data: JSON.parse(addedUser.data)\n      }));\n    }).catch(error => {\n      console.log(\"signup err\", error);\n      dispatch(fetchFail(error));\n      throw Error(error);\n    });\n  };\n}\nexport function setDataAction(data, email, password) {\n  return dispatch => {\n    dispatch(fetchStart());\n    return userService.setdata(data, email, password).then(res => {\n      let receivedUser = res.data;\n      dispatch(fetchSuccess({\n        user: {\n          login: receivedUser.name,\n          email: receivedUser.email\n        },\n        data: JSON.parse(receivedUser.data)\n      }));\n    }).catch(error => {\n      dispatch(fetchFail(error));\n      throw Error(error);\n    });\n  };\n}","map":{"version":3,"sources":["/home/mr_tross/Fullstack/torelax/src/actions/user/user.js"],"names":["userService","fetchStart","type","fetchFail","payload","fetchSuccess","loginAction","email","password","dispatch","login","then","res","receivedUser","data","user","name","JSON","parse","console","log","catch","error","Error","signupAction","signup","addedUser","setDataAction","setdata"],"mappings":"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","sourcesContent":["import userService from '../../userService/index'\n\nfunction fetchStart() {\n  return {\n    type: 'USER_FETCHING'\n  }\n}\n\nfunction fetchFail(payload) {\n  return {\n    type: 'USER_FAIL',\n    payload\n  }\n}\n\nexport function fetchSuccess(payload) {\n  return {\n    type: 'USER_SUCCESS',\n    payload\n  }\n}\n\nexport function loginAction(email, password) {\n  return dispatch => {\n    dispatch(fetchStart());\n\n    return userService.login(email, password).then((res) => {\n      let receivedUser = res.data;\n      dispatch(fetchSuccess({user: {login: receivedUser.name, email: receivedUser.email}, data: JSON.parse(receivedUser.data)}))\n\n      console.log('0')\n    })\n      .catch((error) => {\n        dispatch(fetchFail(error))\n        throw Error(error)\n      })\n  }\n}\n\nexport function signupAction(user, password) {\n  return dispatch => {\n    dispatch(fetchStart());\n\n    return userService.signup(user, password).then((res) => {\n      console.log(\"successful signup\", res);\n      let addedUser = res.data;\n      dispatch(fetchSuccess({user: {login: addedUser.name, email: addedUser.email}, data: JSON.parse(addedUser.data)}))\n    })\n      .catch((error) => {\n        console.log(\"signup err\", error)\n        dispatch(fetchFail(error))\n        throw Error(error)\n      })\n  }\n}\n\nexport function setDataAction(data, email, password) {\n  return dispatch => {\n    dispatch(fetchStart());\n\n    return userService.setdata(data, email, password).then((res) => {\n      let receivedUser = res.data;\n      dispatch(fetchSuccess({user: {login: receivedUser.name, email: receivedUser.email}, data: JSON.parse(receivedUser.data)}))\n    })\n      .catch((error) => {\n        dispatch(fetchFail(error))\n        throw Error(error)\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}