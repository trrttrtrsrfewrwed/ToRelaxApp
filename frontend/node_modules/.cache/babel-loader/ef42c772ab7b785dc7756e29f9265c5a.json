{"ast":null,"code":"let current_data = {\n  user: {\n    login: \"\",\n    email: \"\"\n  },\n  password: \"\"\n};\nlet data = [{\n  user: {\n    login: \"trrttrtrsrfewrwed\",\n    email: \"nurgaliev.tr@phystech.edu\"\n  },\n  password: \"qwerty\"\n}];\n\nfunction resolveAfter2Seconds(x) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n}\n\nfunction rejectAfter1Second(error) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(error);\n    }, 1000);\n  });\n}\n\nasync function addUser(user, password) {\n  if (data.find(elem => {\n    return elem.user.email == user.email;\n  }) == null) {\n    console.log(\"addUser OK\");\n    await resolveAfter2Seconds(42);\n    data.push({\n      user: user,\n      password: password\n    });\n    current_data = {\n      user: user,\n      password: password\n    };\n    return current_data;\n  } else {\n    console.log(\"addUser REJECT\");\n    await rejectAfter1Second(\"user with such email already exists\");\n  }\n}\n\nasync function enter(email, password) {\n  console.log(\"enter\", email, password);\n  let find_result = data.find(elem => {\n    return elem.user.email == email && elem.password == password;\n  });\n  console.log(find_result);\n\n  if (find_result == null) {\n    console.log(\"enter REJECT\");\n    await rejectAfter1Second(\"incorrect email or password\");\n  } else {\n    console.log(\"enter OK\");\n    await resolveAfter2Seconds(42);\n    current_data = find_result;\n    return current_data;\n  }\n}\n\nasync function lout() {\n  console.log(\"logout\");\n  await resolveAfter2Seconds(42);\n  current_data = {\n    user: {\n      login: \"\",\n      email: \"\"\n    },\n    password: \"\"\n  };\n  return null;\n}\n\nasync function cUser() {\n  if (current_data.user === \"\") {\n    console.log(\"currentUser REJECT\");\n    await rejectAfter1Second(\"you need to log in first\");\n  } else {\n    console.log(\"currentUser OK\");\n    await resolveAfter2Seconds(42);\n    return current_data;\n  }\n}\n\nconst UserService = {\n  signup(user, password) {\n    return addUser(user, password); //return http('signup', 'POST', {user, password})\n  },\n\n  login(email, password) {\n    console.log('login');\n    return enter(email, password); //return http('signin', 'POST', {email, password})\n  },\n\n  logout() {\n    return lout(); //return http('signout', 'DELETE')\n  },\n\n  currentUser() {\n    return cUser(); //return http('currentUser', 'GET')\n  }\n\n};\nexport default UserService;","map":{"version":3,"sources":["/home/mr_tross/Fullstack/torelax/src/userService/index.js"],"names":["current_data","user","login","email","password","data","resolveAfter2Seconds","x","Promise","resolve","setTimeout","rejectAfter1Second","error","reject","addUser","find","elem","console","log","push","enter","find_result","lout","cUser","UserService","signup","logout","currentUser"],"mappings":"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","sourcesContent":["\nlet current_data = {\n    user: {login: \"\", email: \"\"},\n    password: \"\"\n}\n\nlet data = [\n    {user: {login: \"trrttrtrsrfewrwed\", email: \"nurgaliev.tr@phystech.edu\"},\n     password: \"qwerty\"}\n]\n\nfunction resolveAfter2Seconds(x) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(x);\n      }, 2000);\n    });\n}\n\nfunction rejectAfter1Second(error) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          reject(error);\n        }, 1000);\n      });\n}\n\nasync function addUser(user, password) {\n    if (data.find((elem) => { return elem.user.email == user.email}) == null) {\n        console.log(\"addUser OK\")\n        await resolveAfter2Seconds(42)\n        data.push({user: user, password: password})\n        current_data = {user: user, password: password}\n        return current_data\n    } else {\n        console.log(\"addUser REJECT\")\n        await rejectAfter1Second(\"user with such email already exists\")\n    }   \n} \n\nasync function enter(email, password) {\n    console.log(\"enter\", email, password)\n    let find_result = data.find((elem) => { return elem.user.email == email && elem.password == password})\n    console.log(find_result)\n    if (find_result == null) {\n        console.log(\"enter REJECT\")\n        await rejectAfter1Second(\"incorrect email or password\")\n    } else {\n        console.log(\"enter OK\")\n        await resolveAfter2Seconds(42)\n        current_data = find_result\n        return current_data\n    }   \n} \n\nasync function lout() {\n    console.log(\"logout\")\n    await resolveAfter2Seconds(42)\n    current_data = {\n        user: {login: \"\", email: \"\"},\n        password: \"\"\n    }\n    return null;\n}\n\nasync function cUser() {\n    if (current_data.user === \"\") {\n        console.log(\"currentUser REJECT\")\n        await rejectAfter1Second(\"you need to log in first\")\n    } else {\n        console.log(\"currentUser OK\")\n        await resolveAfter2Seconds(42)\n        return current_data;\n    }\n}\n\nconst UserService = {\n  signup(user, password) {\n    return addUser(user, password)\n    //return http('signup', 'POST', {user, password})\n  },\n  login(email, password) {\n    console.log('login');\n    return enter(email, password)\n    //return http('signin', 'POST', {email, password})\n  },\n  logout() {\n      return lout()\n    //return http('signout', 'DELETE')\n  },\n  currentUser() {\n      return cUser()\n    //return http('currentUser', 'GET')\n  }\n};\n\nexport default UserService;"]},"metadata":{},"sourceType":"module"}